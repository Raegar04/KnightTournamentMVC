// <auto-generated />
using System;
using KnightTournament.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KnightTournament.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240110075220_create-db")]
    partial class createdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KnightTournament.Models.AppUser", b =>
                {
                    b.Property<Guid>("Round_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("User_Rank")
                        .HasColumnType("int");

                    b.Property<int>("User_Rating")
                        .HasColumnType("int");

                    b.HasKey("Round_Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KnightTournament.Models.Combat", b =>
                {
                    b.Property<Guid>("Combat_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Combat_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Combat_IsFinished")
                        .HasColumnType("bit");

                    b.Property<Guid>("Combat_RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Combat_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Combat_Type")
                        .HasColumnType("int");

                    b.HasKey("Combat_Id");

                    b.HasIndex("Combat_RoundId");

                    b.ToTable("Combats");
                });

            modelBuilder.Entity("KnightTournament.Models.CombatsKnight", b =>
                {
                    b.Property<Guid>("CombatsKnight_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CombatsKnight_AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CombatsKnight_CombatId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CombatsKnight_Points")
                        .HasColumnType("int");

                    b.HasKey("CombatsKnight_Id");

                    b.HasIndex("CombatsKnight_AppUserId");

                    b.HasIndex("CombatsKnight_CombatId");

                    b.ToTable("CombatsKnights", (string)null);
                });

            modelBuilder.Entity("KnightTournament.Models.Location", b =>
                {
                    b.Property<Guid>("Location_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location_City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_ImgUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Location_Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("KnightTournament.Models.Round", b =>
                {
                    b.Property<Guid>("Round_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Round_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Round_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Round_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Round_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Round_TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Round_Id");

                    b.HasIndex("Round_TournamentId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("KnightTournament.Models.Tournament", b =>
                {
                    b.Property<Guid>("Tournament_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tournament_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Tournament_HolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Tournament_LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tournament_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tournament_Scope")
                        .HasColumnType("int");

                    b.Property<DateTime>("Tournament_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Tournament_Status")
                        .HasColumnType("int");

                    b.HasKey("Tournament_Id");

                    b.HasIndex("Tournament_HolderId");

                    b.HasIndex("Tournament_LocationId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("KnightTournament.Models.TournamentUsers", b =>
                {
                    b.Property<Guid>("TournamentUsers_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentUsers_KnightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentUsers_TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TournamentUsers_Id");

                    b.HasIndex("TournamentUsers_KnightId");

                    b.HasIndex("TournamentUsers_TournamentId");

                    b.ToTable("TournamentUsers", (string)null);
                });

            modelBuilder.Entity("KnightTournament.Models.Trophy", b =>
                {
                    b.Property<Guid>("Trophy_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Trophy_KnightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Trophy_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Trophy_RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Trophy_Value")
                        .HasColumnType("float");

                    b.HasKey("Trophy_Id");

                    b.HasIndex("Trophy_KnightId");

                    b.HasIndex("Trophy_RoundId")
                        .IsUnique();

                    b.ToTable("Trophies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Round_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Round_Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Round_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Round_Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Round_Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Round_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Round_Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Round_Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KnightTournament.Models.Combat", b =>
                {
                    b.HasOne("KnightTournament.Models.Round", "Combat_Round")
                        .WithMany("Round_Combats")
                        .HasForeignKey("Combat_RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combat_Round");
                });

            modelBuilder.Entity("KnightTournament.Models.CombatsKnight", b =>
                {
                    b.HasOne("KnightTournament.Models.AppUser", "CombatsKnight_Knight")
                        .WithMany()
                        .HasForeignKey("CombatsKnight_AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KnightTournament.Models.Combat", "CombatsKnight_Combat")
                        .WithMany()
                        .HasForeignKey("CombatsKnight_CombatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CombatsKnight_Combat");

                    b.Navigation("CombatsKnight_Knight");
                });

            modelBuilder.Entity("KnightTournament.Models.Round", b =>
                {
                    b.HasOne("KnightTournament.Models.Tournament", "Round_Tournament")
                        .WithMany("Tournament_Rounds")
                        .HasForeignKey("Round_TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round_Tournament");
                });

            modelBuilder.Entity("KnightTournament.Models.Tournament", b =>
                {
                    b.HasOne("KnightTournament.Models.AppUser", "Tournament_User")
                        .WithMany("User_HoldedTournaments")
                        .HasForeignKey("Tournament_HolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnightTournament.Models.Location", "Tournament_Location")
                        .WithMany("Location_Tournaments")
                        .HasForeignKey("Tournament_LocationId");

                    b.Navigation("Tournament_Location");

                    b.Navigation("Tournament_User");
                });

            modelBuilder.Entity("KnightTournament.Models.TournamentUsers", b =>
                {
                    b.HasOne("KnightTournament.Models.AppUser", "TournamentUsers_Knight")
                        .WithMany()
                        .HasForeignKey("TournamentUsers_KnightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KnightTournament.Models.Tournament", "TournamentUsers_Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentUsers_TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TournamentUsers_Knight");

                    b.Navigation("TournamentUsers_Tournament");
                });

            modelBuilder.Entity("KnightTournament.Models.Trophy", b =>
                {
                    b.HasOne("KnightTournament.Models.AppUser", "Trophy_Knight")
                        .WithMany("User_Trophies")
                        .HasForeignKey("Trophy_KnightId");

                    b.HasOne("KnightTournament.Models.Round", "Trophy_Round")
                        .WithOne("Round_Trophy")
                        .HasForeignKey("KnightTournament.Models.Trophy", "Trophy_RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trophy_Knight");

                    b.Navigation("Trophy_Round");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("KnightTournament.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("KnightTournament.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnightTournament.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("KnightTournament.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnightTournament.Models.AppUser", b =>
                {
                    b.Navigation("User_HoldedTournaments");

                    b.Navigation("User_Trophies");
                });

            modelBuilder.Entity("KnightTournament.Models.Location", b =>
                {
                    b.Navigation("Location_Tournaments");
                });

            modelBuilder.Entity("KnightTournament.Models.Round", b =>
                {
                    b.Navigation("Round_Combats");

                    b.Navigation("Round_Trophy")
                        .IsRequired();
                });

            modelBuilder.Entity("KnightTournament.Models.Tournament", b =>
                {
                    b.Navigation("Tournament_Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
